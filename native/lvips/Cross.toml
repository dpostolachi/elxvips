[build.env]
passthrough = [
  "RUSTLER_NIF_VERSION"
]

[target.aarch64-unknown-linux-gnu]
dockerfile = "./Dockerfile.aarch64-unknown-linux-gnu"
pre-build = [
  """
    export DEBIAN_FRONTEND=noninteractive &&\
    apt-get update &&\
    apt-get install -y build-essential libvips-dev libclang-dev elixir && \
    export PATH="/root/.cargo/bin:${PATH}"
  """
]

[target.arm-unknown-linux-gnueabihf]
image = "arm64v8/ubuntu:20.04"
pre-build = [
  """
    export DEBIAN_FRONTEND=noninteractive &&\
    apt-get update &&\
    apt-get install -y build-essential libvips-dev libclang-dev elixir gcc-arm-linux-gnueabihf
    export PATH="/root/.cargo/bin:${PATH}"
  """
]

# x64 Linux
[target.x86_64-unknown-linux-gnu]
pre-build = [
  """
    export DEBIAN_FRONTEND=noninteractive &&\
    apt-get install -y libvips-dev
  """
]


[target.x86_64-unknown-linux-musl]
pre-build = [
  """
    export DEBIAN_FRONTEND=noninteractive &&\
    apt-get install -y libvips-dev
  """
]

# Mac OS
[target.aarch64-apple-darwin]

[target.x86_64-apple-darwin ]


# from arm64v8/ubuntu:20.04

# # disable interactive functions
# ENV DEBIAN_FRONTEND=noninteractive

# # install add dependencies
# RUN apt-get update
# RUN apt-get install -y build-essential libvips-dev libclang-dev

# # install rustup
# RUN curl https://sh.rustup.rs -sSf | sh -s -- -y

# # add cargo to path
# ENV PATH="/root/.cargo/bin:${PATH}"

# RUN rustup target add aarch64-unknown-linux-gnu

# # set working directory
# WORKDIR /app

# # copy the source tree
# COPY . .

# # build for release
# RUN cargo build --release --target aarch64-unknown-linux-gnu

# # set the startup command to run your binary